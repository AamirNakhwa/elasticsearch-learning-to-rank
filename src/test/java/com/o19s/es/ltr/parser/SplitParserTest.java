package com.o19s.es.ltr.parser;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.o19s.es.ltr.ranker.parser.tree.ParsedSplit;
import org.elasticsearch.common.xcontent.NamedXContentRegistry;
import org.elasticsearch.common.xcontent.XContentParser;
import org.elasticsearch.common.xcontent.json.JsonXContent;
import org.elasticsearch.common.xcontent.json.JsonXContentParser;
import org.junit.Test;

import java.io.IOException;

import static junit.framework.TestCase.assertEquals;

/**
 * Created by doug on 5/26/17.
 */
public class SplitParserTest {

    JsonFactory jsonFactory = new JsonFactory();

    XContentParser makeXContent(String jsonStr) throws IOException {
        JsonParser jsonParser = jsonFactory.createParser(jsonStr);
        return new JsonXContentParser(NamedXContentRegistry.EMPTY, jsonParser);
    }

    @Test
    public void testBasicSplit() throws IOException {
        String split = "{" +
                " \"feature\": \"foo\"," +
                " \"threshold\": 0.5,  " +
                " \"lhs\":    " +
                "    {\"output\": 5.0},"+
                " \"rhs\": " +
                "    {\"output\": 1.0}"+
                "}";


        ParsedSplit ps = ParsedSplit.parse(makeXContent(split));
        assert(ps.getFeature().equals("foo"));
        assert(ps.getThreshold() == 0.5);
        assert(ps.getLhs() != null);
        assert(ps.getRhs() != null);
        assert(ps.getLhs().getOutput() == 5.0);
        assert(ps.getRhs().getOutput() == 1.0);

    }

    @Test
    public void testNestedSplit() throws IOException {
        String split = "{" +
                " \"feature\": \"foo\"," +
                " \"threshold\": 0.5,  " +
                " \"lhs\": {\"split\":  " +
                "           {\"feature\": \"bar\"," +
                "            \"threshold\": 12.0," +
                "            \"lhs\": " +
                "               {\"output\": 100.0}," +
                "            \"rhs\": " +
                "               {\"output\": 500.0}" +
                "       " +
                "    }},"+
                "    \"rhs\": {\"output\": 1.0}"+
                "}";


        ParsedSplit ps = ParsedSplit.parse(makeXContent(split));
        assert(ps.getFeature().equals("foo"));
        assert(ps.getThreshold() == 0.5);
        assert(ps.getLhs() != null);
        assert(ps.getRhs() != null);
        assert(ps.getLhs().getThreshold() == 12.0);
        assert(ps.getLhs().getLhs() != null);
        assert(ps.getLhs().getRhs() != null);
        assert(ps.getLhs().getLhs().getOutput() == 100.0);
        assert(ps.getLhs().getRhs().getOutput() == 500.0);
        assert(ps.getRhs().getOutput() == 1.0);

    }

    @Test
    public void testAutoGeneratedSplit() throws IOException {
        String split = "{\n" +
                "  \"feature\": \" 1 \",\n" +
                "  \"rhs\": {\n" +
                "      \"output\": -0.5782588720321655\n" +
                "  },\n" +
                "  \"lhs\": {\n" +
                "      \"split\": {\n" +
                "          \"feature\": \" 6 \",\n" +
                "          \"rhs\": {\n" +
                "              \"output\": \" -1.3386174440383911 \"\n" +
                "          },\n" +
                "          \"lhs\": {\n" +
                "              \"split\": {\n" +
                "                  \"feature\": \" 3 \",\n" +
                "                  \"rhs\": {\n" +
                "                      \"output\": \" 1.1761366128921509 \"\n" +
                "                  },\n" +
                "                  \"lhs\": {\n" +
                "                      \"split\": {\n" +
                "                          \"feature\": \" 6 \",\n" +
                "                          \"rhs\": {\n" +
                "                              \"output\": \" 0.037376404 \"\n" +
                "                          },\n" +
                "                          \"lhs\": {\n" +
                "                              \"output\": \" -0.04588231444358826 \"\n" +
                "                          },\n" +
                "                          \"threshold\": \" -1.0 \"\n" +
                "                      }\n" +
                "                  },\n" +
                "                  \"threshold\": \" 19.58304 \"\n" +
                "              }\n" +
                "          },\n" +
                "          \"threshold\": \" 12.945955 \"\n" +
                "      }\n" +
                "  },\n" +
                "  \"threshold\": \" 0.0 \"}\n";


        ParsedSplit ps = ParsedSplit.parse(makeXContent(split));
        assertEquals(ps.getFeature(), " 1 ");
        assertEquals(ps.getRhs().getOutput(), -0.57825887, 0.01);
        assertEquals(ps.getLhs().getFeature(), " 6 ");
        assertEquals(ps.getLhs().getRhs().getOutput(), -1.33861744, 0.01);
        assertEquals(ps.getLhs().getLhs().getLhs().getRhs().getOutput(), 0.03737, 0.01);
        assertEquals(ps.getLhs().getLhs().getLhs().getLhs().getOutput(), -0.04588231, 0.01);
        assertEquals(ps.getLhs().getLhs().getLhs().getThreshold(), -1.0, 0.01);



    }
}
